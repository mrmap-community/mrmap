# Generated by Django 5.1.7 on 2025-04-02 14:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registry', '0018_temporarymdmetadatafile_has_import_error'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='harvestedservicemetadatarelation',
            name='harvesting_job',
        ),
        migrations.RemoveField(
            model_name='harvestedservicemetadatarelation',
            name='service_metadata_record',
        ),
        migrations.CreateModel(
            name='HarvestedMetadataRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collecting_state', models.CharField(choices=[('new', 'New'), ('updated', 'Updated'), ('existing', 'Existing'), ('duplicated', 'Duplicated')], max_length=10)),
                ('download_duration', models.DurationField(blank=True, help_text='This is the duration it tooked proportionately to download this record. This means if the GetRecords response contains 50 records for example, the request duration was 50 * self.download_durationTo get the download duration over all for one harvesting job, aggregate this col.', null=True, verbose_name='download duration')),
                ('processing_duration', models.DurationField(blank=True, help_text='This is the duration it tooked to handle the processing of creating or updating this record.', null=True, verbose_name='processing duration')),
                ('dataset_metadata_record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='harvested_dataset_metadata_relations', related_query_name='harvested_dataset_metadata_relation', to='registry.datasetmetadatarecord')),
                ('harvesting_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harvested_metadata_relations', related_query_name='harvested_metadata_relation', to='registry.harvestingjob')),
                ('service_metadata_record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='harvested_service_metadata_relations', related_query_name='harvested_service_metadata_relation', to='registry.servicemetadatarecord')),
            ],
        ),
        migrations.AlterField(
            model_name='harvestingjob',
            name='harvested_dataset_metadata',
            field=models.ManyToManyField(blank=True, editable=False, related_name='harvesting_jobs', related_query_name='harvesting_job', through='registry.HarvestedMetadataRelation', to='registry.datasetmetadatarecord'),
        ),
        migrations.AlterField(
            model_name='harvestingjob',
            name='harvested_service_metadata',
            field=models.ManyToManyField(blank=True, editable=False, related_name='harvesting_jobs', related_query_name='harvesting_job', through='registry.HarvestedMetadataRelation', to='registry.servicemetadatarecord'),
        ),
        migrations.DeleteModel(
            name='HarvestedDatasetMetadataRelation',
        ),
        migrations.DeleteModel(
            name='HarvestedServiceMetadataRelation',
        ),
        migrations.AddIndex(
            model_name='harvestedmetadatarelation',
            index=models.Index(fields=['harvesting_job', 'dataset_metadata_record'], name='registry_ha_harvest_c0a9b2_idx'),
        ),
        migrations.AddIndex(
            model_name='harvestedmetadatarelation',
            index=models.Index(fields=['harvesting_job', 'dataset_metadata_record', 'collecting_state'], name='registry_ha_harvest_0b930b_idx'),
        ),
        migrations.AddIndex(
            model_name='harvestedmetadatarelation',
            index=models.Index(fields=['harvesting_job', 'service_metadata_record'], name='registry_ha_harvest_c0dbc4_idx'),
        ),
        migrations.AddIndex(
            model_name='harvestedmetadatarelation',
            index=models.Index(fields=['harvesting_job', 'service_metadata_record', 'collecting_state'], name='registry_ha_harvest_ec0096_idx'),
        ),
        migrations.AddConstraint(
            model_name='harvestedmetadatarelation',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('dataset_metadata_record__isnull', True), ('service_metadata_record__isnull', False)), models.Q(('dataset_metadata_record__isnull', False), ('service_metadata_record__isnull', True)), _connector='OR'), name='dm_record_or_sm_record', violation_error_message='wrong relation type. dataset_metadata_record or service_metadata_record, not both is required.'),
        ),
        migrations.AddConstraint(
            model_name='harvestedmetadatarelation',
            constraint=models.UniqueConstraint(condition=models.Q(('collecting_state', 'duplicated'), _negated=True), fields=('harvesting_job', 'dataset_metadata_record', 'collecting_state'), name='atomic_new_updated_or_exsisting_collecting_state_for_dm_record'),
        ),
        migrations.AddConstraint(
            model_name='harvestedmetadatarelation',
            constraint=models.UniqueConstraint(condition=models.Q(('collecting_state', 'duplicated'), _negated=True), fields=('harvesting_job', 'service_metadata_record', 'collecting_state'), name='atomic_new_updated_or_exsisting_collecting_state_for_sm_record'),
        ),
    ]
