# docker compose file for productive useage
version: '3.8'
services:

  postgis:
    image: postgis/postgis:17-3.5-alpine
    volumes:
      - type: volume
        source: db-data-17
        target: /var/lib/postgresql/data
    networks:
      - mrmap-internal
    environment:
      POSTGRES_USER: "${DB_USER:?Please configure DB_USER in the .env file}"
      POSTGRES_PASSWORD: "${DB_PASSWORD:?Please configure DB_PASSWORD in the .env file}"
      POSTGRES_DB: mrmap
  # migration guide:
  # 1. backup current db => docker exec -it `container_id` pg_dumpall -U mrmap  > .upgrade_backup.sql
  # 2. call pg_extract script => backend/.bash_scripts/pg_extract.sh .upgrade_backup.sql mrmap >> upgrade_backup_mydb.sql
  # 3. change image definition to higher postgis; change volume source to new location; start container => docker compose up postgis --build
  # 4. cat upgrade_backup_mydb.sql | docker exec -i `container_id` psql -U mrmap
  # Done

  redis:
    image: library/redis:7.4.2-alpine3.21
    volumes:
      - type: volume
        source: mem-db-data
        target: /data
    networks:
      - mrmap-internal
    environment:
      - loglevel=error

  mapserver:
    image: camptocamp/mapserver:7.6
    hostname: "mrmap-mapserver"
    volumes:
      - type: bind
        source: ./docker/mapserver/mapfiles
        target: /etc/mapserver/mapfiles
      - type: bind
        source: ./docker/mapserver/shapefiles
        target: /etc/mapserver/shapefiles
    networks:
      - mrmap-internal

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    hostname: "backend"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-static
        target: /var/www/mrmap/backend
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
    networks:
      - mrmap-internal
    environment:
      EXTERNAL_BASE_URL: "${EXTERNAL_BASE_URL:?Please configure EXTERNAL_BASE_URL in the .env file}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY:?Please configure DJANGO_SECRET_KEY in the .env file}"
      MRMAP_USER: "${DJANGO_ADMIN_USER:?Please configure DJANGO_ADMIN_USER in the .env file}"
      MRMAP_PASSWORD: "${DJANGO_ADMIN_PASSWORD:?Please configure DJANGO_ADMIN_PASSWORD in the .env file}"
      SQL_USER: "${DB_USER:?Please configure DB_PASSWORD in the .env file}"
      SQL_PASSWORD: "${DB_PASSWORD:?Please configure DB_PASSWORD in the .env file}"
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-4}
    env_file:
      - docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis
      - mapserver

  celery-worker:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    # deploy:
    #   replicas: 10
    command: >
      /bin/sh -c "celery -A MrMap worker -E -l INFO -Q download,default,db-routines --statedb=/var/run/celery/%n-%i_worker.state"
    # Do not activate tty!!!!! This will freeze the worker process in case of console spamming. 
    # See: https://stackoverflow.com/questions/48021772/docker-process-hangs-on-write-system-call-to-stdout
    #tty: true # To support colorized log output.
    hostname: "celery-worker"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
      - type: volume
        source: celery-state
        target: /var/run/celery
    networks:
      - mrmap-internal
    environment:
      EXTERNAL_BASE_URL: "${EXTERNAL_BASE_URL:?Please configure EXTERNAL_BASE_URL in the .env file}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY:?Please configure DJANGO_SECRET_KEY in the .env file}"
      MRMAP_USER: "${DJANGO_ADMIN_USER:?Please configure DJANGO_ADMIN_USER in the .env file}"
      MRMAP_PASSWORD: "${DJANGO_ADMIN_PASSWORD:?Please configure DJANGO_ADMIN_PASSWORD in the .env file}"
      SQL_USER: "${DB_USER:?Please configure DB_PASSWORD in the .env file}"
      SQL_PASSWORD: "${DB_PASSWORD:?Please configure DB_PASSWORD in the .env file}"
    env_file:
      - ./docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis
    cap_add:
      - SYS_PTRACE
    healthcheck:
      test: celery -A MrMap inspect ping || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always

  celery-beat:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    command: >
      /bin/sh -c "celery -A MrMap beat --loglevel INFO --scheduler django"
    tty: true # To support colorized log output.
    hostname: "mrmap-celery-beat"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
    networks:
      - mrmap-internal
    environment:
      EXTERNAL_BASE_URL: "${EXTERNAL_BASE_URL:?Please configure EXTERNAL_BASE_URL in the .env file}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY:?Please configure DJANGO_SECRET_KEY in the .env file}"
      MRMAP_USER: "${DJANGO_ADMIN_USER:?Please configure DJANGO_ADMIN_USER in the .env file}"
      MRMAP_PASSWORD: "${DJANGO_ADMIN_PASSWORD:?Please configure DJANGO_ADMIN_PASSWORD in the .env file}"
      SQL_USER: "${DB_USER:?Please configure DB_PASSWORD in the .env file}"
      SQL_PASSWORD: "${DB_PASSWORD:?Please configure DB_PASSWORD in the .env file}"
    env_file:
      - ./docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis

  frontend:
    build:
      context: ./
      dockerfile: ./docker/nginx/nginx.Dockerfile
      args:
        # For Production: Insert the correct schema and the correct hostname and port of the backend
        - VITE_API_BASE_URL=${EXTERNAL_BASE_URL:?Please configure EXTERNAL_BASE_URL in the .env file}
        - VITE_API_PORT=${EXTERNAL_PORT:?Please configure EXTERNAL_PORT in the .env file}
        - VITE_API_SCHEMA=${EXTERNAL_SCHEME:?Please configure EXTERNAL_SCHEME in the .env file}
    hostname: "nginx"
    volumes:
      - type: bind
        source: ./docker/nginx/mrmap.conf
        target: /etc/nginx/conf.d/default.conf
      - type: volume
        source: backend-static
        target: /var/www/mrmap/backend
      - type: volume
        source: frontend-static
        target: /var/www/mrmap/frontend
    ports:
      - "8008:80"
    depends_on:
      - backend
    networks:
      - mrmap-internal
    extra_hosts:
      - host.docker.internal:host-gateway

  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:v0.15.0-rc5
    restart: unless-stopped
    hostname: "openobserve"
    environment:
      ZO_ROOT_USER_EMAIL: "${OPENOBSERVE_USER:?Please configure OPENOBSERVE_USER in the .env file}"
      ZO_ROOT_USER_PASSWORD: "${OPENOBSERVE_PASSWORD:?Please configure OPOPENOBSERVE_PASSWORDNOBSERVE_USER in the .env file}"
      ZO_BASE_URI: "/openobserve"
    volumes:
      - type: volume 
        source: openobserve-data
        target: /data
    networks:
      - mrmap-internal

  pgadmin:
    image: dpage/pgadmin4:9.7
    restart: unless-stopped
    hostname: "pgadmin"
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_USER:?Please configure PGADMIN_USER in the .env file}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD:?Please configure PGADMIN_PASSWORD in the .env file}"
      PGADMIN_REPLACE_SERVERS_ON_STARTUP: true
      PGADMIN_LISTEN_PORT: 8009
    volumes:
      - type: bind
        source: ./docker/pgadmin/servers.json
        target: /pgadmin4/servers.json
    networks:
      - mrmap-internal    


volumes:
  frontend-static: null
  backend-static: null
  backend-media: null
  backend-log: null
  backend-import: null
  celery-state: null
  db-data: null
  db-data-17: null
  mem-db-data: null
  openobserve-data: null

networks:
  mrmap-internal: null
