# docker compose file for development useage
version: '3.8'
services:

  frontend:
    build:
      context: ./
      dockerfile: ./docker/nginx.Dockerfile
      args:
        - VITE_API_BASE_URL=localhost:8001
        - VITE_API_SCHEMA=http

  # Extend the existing postgis container with an accessible port for development purposes
  postgis:
    ports:
      - 5555:5432

  redis:
    ports:
      - 5556:6379

  inspire-validator:
    build:
      context: ./docker/inspire-validator
    ports:
      - "5557:8080"
    networks:
      - mrmap-internal
    extra_hosts:
      - host.docker.internal:host-gateway

  mapserver:
    ports:
      - "8090:80"

  pre-commit-check:
    build:
      context: ./mrmap
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: 'False'
    entrypoint: /opt/mrmap/.bash_scripts/wait_db.sh
    command: /bin/sh -c "/opt/mrmap/.bash_scripts/pre_commit_check.sh"
    hostname: "mrmap-test"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis

  behave:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: 'False'
    shm_size: '2gb' # Fix 'Failed to decode response from marionette' (https://stackoverflow.com/questions/49734915/)
    tty: true # To support colorized log output of gherkin and other log information. 
    entrypoint: /opt/mrmap/.bash_scripts/wait_db.sh
    command: >
      /bin/sh -c "python -m coverage run --branch --source='/opt/mrmap' /opt/mrmap/manage.py behave --simple --noinput --tags=-skip --no-skipped tests/behave/features && python -m coverage xml -i -o acceptance-tests-coverage-report.xml"
    hostname: "mrmap-behave"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
    environment:
      - DJANGO_DEBUG=0
      - MRMAP_PRODUCTION=False
    depends_on:
      - postgis
      - redis

  django-tests:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: 'False'
    shm_size: '2gb' # Fix 'Failed to decode response from marionette' (https://stackoverflow.com/questions/49734915/)
    tty: true # To support colorized log output of gherkin and other log information. 
    entrypoint: /opt/mrmap/.bash_scripts/wait_db.sh
    command: >
      /bin/sh -c "python -m coverage run --branch --source='/opt/mrmap' ./manage.py test /opt/mrmap/tests/ --noinput && python -m coverage xml -i -o unit-tests-coverage-report.xml"
    hostname: "mrmap-django-tests"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
    environment:
      - DJANGO_DEBUG=0
      - MRMAP_PRODUCTION=False
    depends_on:
      - postgis
      - redis
      - mapserver

  backend:
    build:
      args:
        MRMAP_PRODUCTION: "False"
    container_name: backend-dev
    environment:
      - DJANGO_DEBUG=1
      - MRMAP_PRODUCTION=False
    env_file:
      - docker/backend/.mrmap.env
    ports:
      - "0.0.0.0:8001:8001"
    command: /bin/sh -c "python manage.py runserver 0.0.0.0:8001"

  celery-worker:
    build:
      args:
        MRMAP_PRODUCTION: "False"
    environment:
      - DJANGO_DEBUG=1
      - MRMAP_PRODUCTION=False
    env_file:
      - ./docker/backend/.mrmap.env
    command: >
      /bin/sh -c "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A MrMap worker -E -l DEBUG -Q download,default,db-routines --statedb=/var/run/celery/%n-%i_worker.state"

  celery-beat:
    build:
      args:
        MRMAP_PRODUCTION: "False"
    environment:
      - DJANGO_DEBUG=1
      - MRMAP_PRODUCTION=False
    env_file:
      - ./docker/backend/.mrmap.env
    command: >
      /bin/sh -c "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A MrMap beat --loglevel INFO --scheduler django"

networks:
  sonar:

    null
volumes:
  sonar-db: null
