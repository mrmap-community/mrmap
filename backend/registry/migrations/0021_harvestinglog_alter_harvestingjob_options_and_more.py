# Generated by Django 5.1.7 on 2025-04-09 13:48

import django.db.models.deletion
import registry.models.harvest
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registry', '0020_alter_catalogueservice_xml_backup_file_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='HarvestingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Datetime field when the task result was created in UTC', verbose_name='Created DateTime')),
                ('level', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Fatal'), (1, 'Error'), (2, 'Warning'), (3, 'Info'), (4, 'Debug')], default=3, max_length=10)),
                ('kind', models.PositiveSmallIntegerField(blank=True, choices=[(None, '(Unknown)'), (0, 'Remote Error'), (1, 'received records count missmatch')], null=True)),
                ('description', models.CharField(blank=True, default='', max_length=512, verbose_name='Description')),
                ('extented_description', models.FileField(help_text='this can be the response content for example', null=True, upload_to=registry.models.harvest.extented_description_file_path, verbose_name='Extented Description')),
            ],
        ),
        migrations.AlterModelOptions(
            name='harvestingjob',
            options={'get_latest_by': '-date_created', 'ordering': ['-date_created'], 'verbose_name': 'Harvesting Job', 'verbose_name_plural': 'Harvesting Jobs'},
        ),
        migrations.AlterModelOptions(
            name='historicalharvestingjob',
            options={'get_latest_by': ('history_date', 'history_id'), 'ordering': ('-history_date', '-history_id'), 'verbose_name': 'historical Harvesting Job', 'verbose_name_plural': 'historical Harvesting Jobs'},
        ),
        migrations.RemoveConstraint(
            model_name='harvestedmetadatarelation',
            name='atomic_new_updated_or_exsisting_collecting_state_for_dm_record',
        ),
        migrations.RemoveConstraint(
            model_name='harvestedmetadatarelation',
            name='atomic_new_updated_or_exsisting_collecting_state_for_sm_record',
        ),
        migrations.RemoveField(
            model_name='harvestingjob',
            name='background_process',
        ),
        migrations.RemoveField(
            model_name='historicalharvestingjob',
            name='background_process',
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, help_text='Datetime field when the process was created in UTC', null=True, verbose_name='Created DateTime'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='done_at',
            field=models.DateTimeField(blank=True, help_text='Datetime field when the process was completed in UTC', null=True, verbose_name='Completed DateTime'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='log_level',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Fatal'), (1, 'Error'), (2, 'Warning'), (3, 'Info'), (4, 'Debug')], default=3),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='phase',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'pending'), (1, 'get total records count'), (2, 'download records'), (3, 'records to db'), (4, 'completed'), (5, 'aborted')], default=0, help_text='Current phase of the process', verbose_name='phase'),
        ),
        migrations.AddField(
            model_name='historicalharvestingjob',
            name='date_created',
            field=models.DateTimeField(blank=True, editable=False, help_text='Datetime field when the process was created in UTC', null=True, verbose_name='Created DateTime'),
        ),
        migrations.AddField(
            model_name='historicalharvestingjob',
            name='done_at',
            field=models.DateTimeField(blank=True, help_text='Datetime field when the process was completed in UTC', null=True, verbose_name='Completed DateTime'),
        ),
        migrations.AddField(
            model_name='historicalharvestingjob',
            name='log_level',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Fatal'), (1, 'Error'), (2, 'Warning'), (3, 'Info'), (4, 'Debug')], default=3),
        ),
        migrations.AddField(
            model_name='historicalharvestingjob',
            name='phase',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'pending'), (1, 'get total records count'), (2, 'download records'), (3, 'records to db'), (4, 'completed'), (5, 'aborted')], default=0, help_text='Current phase of the process', verbose_name='phase'),
        ),
        migrations.AlterField(
            model_name='harvestedmetadatarelation',
            name='collecting_state',
            field=models.PositiveSmallIntegerField(choices=[(1, 'new'), (2, 'updated'), (3, 'existing'), (0, 'duplicated')]),
        ),
        migrations.AddIndex(
            model_name='harvestingjob',
            index=models.Index(fields=['date_created'], name='registry_ha_date_cr_7fa6db_idx'),
        ),
        migrations.AddIndex(
            model_name='harvestingjob',
            index=models.Index(fields=['done_at'], name='registry_ha_done_at_0a96d0_idx'),
        ),
        migrations.AddConstraint(
            model_name='harvestedmetadatarelation',
            constraint=models.UniqueConstraint(condition=models.Q(('collecting_state', 0), _negated=True), fields=('harvesting_job', 'dataset_metadata_record', 'collecting_state'), name='atomic_new_updated_or_exsisting_collecting_state_for_dm_record'),
        ),
        migrations.AddConstraint(
            model_name='harvestedmetadatarelation',
            constraint=models.UniqueConstraint(condition=models.Q(('collecting_state', 0), _negated=True), fields=('harvesting_job', 'service_metadata_record', 'collecting_state'), name='atomic_new_updated_or_exsisting_collecting_state_for_sm_record'),
        ),
        migrations.AddField(
            model_name='harvestinglog',
            name='harvesting_job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', related_query_name='log', to='registry.harvestingjob'),
        ),
    ]
