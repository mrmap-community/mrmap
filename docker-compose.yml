# docker compose file for productive useage
version: '3.8'
services:

  postgis:
    image: postgis/postgis:17-3.5-alpine
    volumes:
      - type: volume
        source: db-data-17
        target: /var/lib/postgresql/data
    networks:
      - mrmap-internal
    env_file:
      - ./docker/postgis/.db.env
  # migration guide:
  # 1. backup current db => docker exec -it `container_id` pg_dumpall -U mrmap  > .upgrade_backup.sql
  # 2. call pg_extract script => backend/.bash_scripts/pg_extract.sh .upgrade_backup.sql mrmap >> upgrade_backup_mydb.sql
  # 3. change image definition to higher postgis; change volume source to new location; start container => docker compose up postgis --build
  # 4. cat upgrade_backup_mydb.sql | docker exec -i `container_id` psql -U mrmap
  # Done

  redis:
    image: library/redis:7.4.2-alpine3.21
    volumes:
      - type: volume
        source: mem-db-data
        target: /data
    networks:
      - mrmap-internal
    environment:
      - loglevel=error

  mapserver:
    image: camptocamp/mapserver:7.6
    hostname: "mrmap-mapserver"
    volumes:
      - type: bind
        source: ./docker/mapserver/mapfiles
        target: /etc/mapserver/mapfiles
      - type: bind
        source: ./docker/mapserver/shapefiles
        target: /etc/mapserver/shapefiles
    networks:
      - mrmap-internal

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    hostname: "backend"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-static
        target: /var/www/mrmap/backend
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
    networks:
      - mrmap-internal
    env_file:
      - docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis
      - mapserver

  celery-worker:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    # deploy:
    #   replicas: 10
    command: >
      /bin/sh -c "celery -A MrMap worker -E -l INFO -Q download,default,db-routines --statedb=/var/run/celery/%n-%i_worker.state"
    # Do not activate tty!!!!! This will freeze the worker process in case of console spamming. 
    # See: https://stackoverflow.com/questions/48021772/docker-process-hangs-on-write-system-call-to-stdout
    #tty: true # To support colorized log output.
    hostname: "celery-worker"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
      - type: volume
        source: celery-state
        target: /var/run/celery
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis
    cap_add:
      - SYS_PTRACE
    healthcheck:
      test: celery -A MrMap inspect ping || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 40s

    restart: always

  celery-beat:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    command: >
      /bin/sh -c "celery -A MrMap beat --loglevel INFO --scheduler django"
    tty: true # To support colorized log output.
    hostname: "mrmap-celery-beat"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis

  frontend:
    build:
      context: ./
      dockerfile: ./docker/nginx/nginx.Dockerfile
      args:
        # For Production: Insert the correct schema and the correct hostname and port of the backend
        - VITE_API_BASE_URL=localhost:443
        - VITE_API_SCHEMA=https
    hostname: "nginx"
    volumes:
      # To provide a concrete certificate
      #- type: bind
      #  source: path-to-cert
      #  target: /etc/ssl/certs/nginx-selfsigned.crt
      #- type: bind
      #  source: path-to-cert-key
      #  target: /etc/ssl/private/nginx-selfsigned.key
      - type: bind
        source: ./docker/nginx/mrmap.conf
        target: /etc/nginx/conf.d/default.conf
      - type: volume
        source: backend-static
        target: /var/www/mrmap/backend
      - type: volume
        source: frontend-static
        target: /var/www/mrmap/frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - mrmap-internal
    extra_hosts:
      - host.docker.internal:host-gateway

  graylog-db:
    image: "mongo:6.0"  
    restart: "on-failure"
    hostname: "graylogdb"
    networks:
      - graylog
    volumes:
      - "graylog-db-data:/data/db"
      - "graylog-db-config:/data/configdb"  

  # For DataNode setup, graylog starts with a preflight UI, this is a change from just using OpenSearch/Elasticsearch.
  # Please take a look at the README at the top of this repo or the regular docs for more info.
  # Graylog Data Node: https://hub.docker.com/r/graylog/graylog-datanode

  # ⚠️ Make sure this is set on the host before starting:
  # echo "vm.max_map_count=262144" | sudo tee -a /etc/sysctl.conf
  # sudo sysctl -p
  datanode:
    image: "${DATANODE_IMAGE:-graylog/graylog-datanode:6.3}"
    hostname: "datanode"
    environment:
      GRAYLOG_DATANODE_NODE_ID_FILE: "/var/lib/graylog-datanode/node-id"
      # GRAYLOG_DATANODE_PASSWORD_SECRET and GRAYLOG_PASSWORD_SECRET MUST be the same value
      GRAYLOG_DATANODE_PASSWORD_SECRET: "Etlkb4K7NzJ63iVFJUbEE0oSRHUyFKWzffxkl6KPsVqPOa9VoHRqiNN2wRbmt4yaDQOPKrNWbDLfQVBmnfAnBXjSv87gupmK"
      GRAYLOG_DATANODE_MONGODB_URI: "mongodb://graylogdb:27017/graylog"
    ulimits:
      memlock:
        hard: -1
        soft: -1
      nofile:
        soft: 65536
        hard: 65536
    #ports:
    #- "8999:8999/tcp"   # DataNode API
    #- "9200:9200/tcp"
    #- "9300:9300/tcp"
    networks:
      - graylog  
    volumes:
      - "graylog-datanode:/var/lib/graylog-datanode"
    restart: "on-failure"


  # Graylog: https://hub.docker.com/r/graylog/graylog-enterprise
  graylog:
    hostname: "gaylog"
    image: "${GRAYLOG_IMAGE:-graylog/graylog:6.3}"
    depends_on:
      graylog-db:
        condition: "service_started"
      datanode:
        condition: "service_started"
    entrypoint: "/usr/bin/tini --  /docker-entrypoint.sh"
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/data/node-id"
      # GRAYLOG_DATANODE_PASSWORD_SECRET and GRAYLOG_PASSWORD_SECRET MUST be the same value
      GRAYLOG_PASSWORD_SECRET: "Etlkb4K7NzJ63iVFJUbEE0oSRHUyFKWzffxkl6KPsVqPOa9VoHRqiNN2wRbmt4yaDQOPKrNWbDLfQVBmnfAnBXjSv87gupmK"
      GRAYLOG_ROOT_PASSWORD_SHA2: "e3c652f0ba0b4801205814f8b6bc49672c4c74e25b497770bb89b22cdeb4e951"
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
      GRAYLOG_MONGODB_URI: "mongodb://graylogdb:27017/graylog"
    # ports:
    #- "5044:5044/tcp"   # Beats
    #- "5140:5140/udp"   # Syslog
    #- "5140:5140/tcp"   # Syslog
    #- "514:514/tcp"   # Syslog
    #- "5555:5555/tcp"   # RAW TCP
    #- "5555:5555/udp"   # RAW UDP
    # - "9000:9000/tcp"   # Server API
    #- "12201:12201/tcp" # GELF TCP
    #- "12201:12201/udp" # GELF UDP
    #- "10000:10000/tcp" # Custom TCP port
    #- "10000:10000/udp" # Custom UDP port
    #- "13301:13301/tcp" # Forwarder data
    #- "13302:13302/tcp" # Forwarder config
    networks:
      - graylog
      - mrmap-internal
    volumes:
      - "graylog-data:/usr/share/graylog/data/data"
    restart: "on-failure"


volumes:
  frontend-static: null
  backend-static: null
  backend-media: null
  backend-log: null
  backend-import: null
  celery-state: null
  db-data: null
  db-data-17: null
  mem-db-data: null
  graylog-db-data: null
  graylog-db-config: null
  graylog-data: null
  graylog-datanode: null

networks:
  mrmap-internal: null
  graylog: null
