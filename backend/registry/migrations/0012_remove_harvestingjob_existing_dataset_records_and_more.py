# Generated by Django 5.1.6 on 2025-03-03 10:17

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registry', '0011_alter_harvestingjob_options_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='harvestingjob',
            name='existing_dataset_records',
        ),
        migrations.RemoveField(
            model_name='harvestingjob',
            name='existing_service_records',
        ),
        migrations.RemoveField(
            model_name='harvestingjob',
            name='new_dataset_records',
        ),
        migrations.RemoveField(
            model_name='harvestingjob',
            name='new_service_records',
        ),
        migrations.RemoveField(
            model_name='harvestingjob',
            name='updated_dataset_records',
        ),
        migrations.RemoveField(
            model_name='harvestingjob',
            name='updated_service_records',
        ),
        migrations.CreateModel(
            name='HarvestedDatasetMetadataRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collecting_state', models.CharField(choices=[('new', 'New'), ('updated', 'Updated'), ('existing', 'Existing'), ('duplicated', 'Duplicated')], max_length=10)),
                ('dataset_metadata_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harvested_dataset_metadata_relations', related_query_name='harvested_dataset_metadata_relation', to='registry.datasetmetadatarecord')),
                ('harvesting_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)ss', related_query_name='%(app_label)s_%(class)s', to='registry.harvestingjob')),
            ],
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='harvested_dataset_metadata',
            field=models.ManyToManyField(blank=True, editable=False, related_name='harvesting_jobs', related_query_name='harvesting_job', through='registry.HarvestedDatasetMetadataRelation', to='registry.datasetmetadatarecord'),
        ),
        migrations.CreateModel(
            name='HarvestedServiceMetadataRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collecting_state', models.CharField(choices=[('new', 'New'), ('updated', 'Updated'), ('existing', 'Existing'), ('duplicated', 'Duplicated')], max_length=10)),
                ('harvesting_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)ss', related_query_name='%(app_label)s_%(class)s', to='registry.harvestingjob')),
                ('service_metadata_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harvested_service_metadata_relations', related_query_name='harvested_service_metadata_relation', to='registry.servicemetadatarecord')),
            ],
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='harvested_service_metadata',
            field=models.ManyToManyField(blank=True, editable=False, related_name='harvesting_jobs', related_query_name='harvesting_job', through='registry.HarvestedServiceMetadataRelation', to='registry.servicemetadatarecord'),
        ),
        migrations.AddIndex(
            model_name='harvesteddatasetmetadatarelation',
            index=models.Index(fields=['harvesting_job', 'dataset_metadata_record'], name='registry_ha_harvest_4fdb29_idx'),
        ),
        migrations.AddIndex(
            model_name='harvesteddatasetmetadatarelation',
            index=models.Index(fields=['harvesting_job', 'dataset_metadata_record', 'collecting_state'], name='registry_ha_harvest_54e746_idx'),
        ),
        migrations.AddConstraint(
            model_name='harvesteddatasetmetadatarelation',
            constraint=models.UniqueConstraint(condition=models.Q(('collecting_state', 'duplicated'), _negated=True), fields=('harvesting_job', 'dataset_metadata_record', 'collecting_state'), name='registry_harvesteddatasetmetadatarelation_atomic_new_updated_or_exsisting_collecting_state'),
        ),
        migrations.AddIndex(
            model_name='harvestedservicemetadatarelation',
            index=models.Index(fields=['harvesting_job', 'service_metadata_record'], name='registry_ha_harvest_b410b5_idx'),
        ),
        migrations.AddIndex(
            model_name='harvestedservicemetadatarelation',
            index=models.Index(fields=['harvesting_job', 'service_metadata_record', 'collecting_state'], name='registry_ha_harvest_b92526_idx'),
        ),
        migrations.AddConstraint(
            model_name='harvestedservicemetadatarelation',
            constraint=models.UniqueConstraint(condition=models.Q(('collecting_state', 'duplicated'), _negated=True), fields=('harvesting_job', 'service_metadata_record', 'collecting_state'), name='registry_harvestedservicemetadatarelation_atomic_new_updated_or_exsisting_collecting_state'),
        ),
    ]
